name: Release

on:
  push:
    branches:
      - main
      - next

jobs:
  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest

    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install dependencies
        run: npm ci

      - name: Verify the integrity of provenance attestations and registry signatures for installed dependencies
        run: npm audit signatures

      - name: Release
        id: semantic_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      - name: Save Release Details
        id: log_release_details
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag_name=$(gh release view --json tagName --jq '.tagName')
          body=$(gh release view --json body --jq '.body')
          id=$(gh release view --json id --jq '.id')
          draft=$(gh release view --json isDraft --jq '.isDraft')
          prerelease=$(gh release view --json isPrerelease --jq '.isPrerelease')

          body="${body//$'\n'/\\n}"

          echo "Release Details:"
          echo "Tag Name: ${tag_name}"
          echo "Body: ${body}"
          echo "ID: ${id}"
          echo "Draft: ${draft}"
          echo "Prerelease: ${prerelease}"

          echo '{
            "tag_name": "'"${tag_name}"'",
            "id": "'"${id}"'",
            "body": "'"${body}"'",
            "prerelease": "'"${prerelease}"'",
            "draft": "'"${draft}"'"
          }' > release_info.json

      - name: Upload Release Details
        uses: actions/upload-artifact@v4
        with:
          name: release-info
          path: release_info.json

  tauri-release:
    name: Tauri Release
    needs: semantic-release

    permissions:
      contents: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Download Release Details
        uses: actions/download-artifact@v4
        with:
          name: release-info

      - name: Read Release Details
        id: log_release_details
        shell: bash
        run: |
          release_info=$(cat release_info.json)
          tag_name=$(echo "$release_info" | jq -r '.tag_name')
          id=$(echo "$release_info" | jq -r '.id')
          body=$(echo "$release_info" | jq -r '.body')
          draft=$(echo "$release_info" | jq -r '.draft')
          prerelease=$(echo "$release_info" | jq -r '.prerelease')

          echo "Tag Name: $tag_name"
          echo "ID: $id"
          echo "Body: $body"
          echo "Draft: $draft"
          echo "Prerelease: $prerelease"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: npm install

      - name: Build and Publish Tauri App
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: '${{ steps.log_release_details.outputs.tag_name }}'
          releaseName: 'App v${{ steps.log_release_details.outputs.tag_name }}'
          releaseBody: '${{ steps.log_release_details.outputs.body }}'
          releaseId: '${{ steps.log_release_details.outputs.id }}'
          releaseDraft: ${{ steps.log_release_details.outputs.draft }}
          prerelease: ${{ steps.log_release_details.outputs.prerelease }}
          args: ${{ matrix.args }}
