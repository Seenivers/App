name: Cleanup caches by branch
on:
  workflow_dispatch:
  pull_request:
    types:
      - closed

jobs:
  cleanup:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cleanup
        run: |
          set -eo pipefail

          echo "Fetching all cache keys..."
          # Holt alle Caches, sortiert nach Erstellungsdatum
          allCaches=$(gh cache list --limit 1000 --json id,ref,createdAt --jq 'sort_by(.createdAt)')

          if [ -z "$allCaches" ]; then
              echo "No caches found. Exiting."
              exit 0
          fi

          echo "Fetching list of active branches..."
          # Holt alle aktiven Branches
          activeBranches=$(git ls-remote --heads origin | awk '{print $2}' | sed 's#refs/heads/##')

          echo "Processing caches..."
          deletedCaches=0

          # Iterate over all caches
          echo "$allCaches" | jq -c '.[]' | while read -r cache; do
            cacheID=$(echo "$cache" | jq -r '.id')
            cacheRef=$(echo "$cache" | jq -r '.ref')

            # Extract branch name from cache reference
            branchName=$(echo "$cacheRef" | sed -E 's#refs/heads/##')

            # Check if the branch still exists
            if ! echo "$activeBranches" | grep -q "^$branchName$"; then
              # If the branch doesn't exist anymore, delete the cache
              echo "Branch $branchName no longer exists. Deleting cache..."
              gh cache delete "$cacheID"
              deletedCaches=$((deletedCaches + 1))
            else
              # For branches that still exist, get all caches for this branch
              branchCaches=$(echo "$allCaches" | jq --arg ref "$cacheRef" '[.[] | select(.ref == $ref)]')

              # Count the caches for this branch
              cacheCount=$(echo "$branchCaches" | jq 'length')

              # If there are more than 2 caches, delete the oldest ones
              if [ "$cacheCount" -gt 2 ]; then
                echo "Branch $branchName has $cacheCount caches. Keeping only the 2 newest..."
                cachesToDelete=$(echo "$branchCaches" | jq -r '.[].id' | head -n -2)

                for oldCacheID in $cachesToDelete; do
                  echo "Deleting old cache: $oldCacheID"
                  gh cache delete "$oldCacheID"
                  deletedCaches=$((deletedCaches + 1))
                done
              fi
            fi
          done

          echo "Cleanup completed. $deletedCaches caches deleted."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
